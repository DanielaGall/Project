 },
  {
   "cell_type": "code",
      "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
@@ -190,6 +190,9 @@
      "\n",
      "\u001b[37m## TODO: Import any additional libraries you need to define a model\u001b[39;49;00m\n",
      "\u001b[34mfrom\u001b[39;49;00m \u001b[04m\u001b[36msklearn.linear_model\u001b[39;49;00m \u001b[34mimport\u001b[39;49;00m LinearRegression\n",
      "\u001b[34mfrom\u001b[39;49;00m \u001b[04m\u001b[36msklearn.svm\u001b[39;49;00m \u001b[34mimport\u001b[39;49;00m SVC\n",
      "\u001b[34mfrom\u001b[39;49;00m \u001b[04m\u001b[36msklearn.neural_network\u001b[39;49;00m \u001b[34mimport\u001b[39;49;00m MLPClassifier\n",
      "\n",
      "\n",
      "\u001b[37m# Provided model load function\u001b[39;49;00m\n",
      "\u001b[34mdef\u001b[39;49;00m \u001b[32mmodel_fn\u001b[39;49;00m(model_dir):\n",
@@ -221,10 +224,13 @@
      "    parser.add_argument(\u001b[33m'\u001b[39;49;00m\u001b[33m--data-dir\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m, \u001b[36mtype\u001b[39;49;00m=\u001b[36mstr\u001b[39;49;00m, default=os.environ[\u001b[33m'\u001b[39;49;00m\u001b[33mSM_CHANNEL_TRAINING\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m])\n",
      "    \n",
      "    \u001b[37m## TODO: Add any additional arguments that you will need to pass into your model\u001b[39;49;00m\n",
      "    parser.add_argument(\u001b[33m'\u001b[39;49;00m\u001b[33m--max_iter\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m, \u001b[36mtype\u001b[39;49;00m=\u001b[36mint\u001b[39;49;00m, default=\u001b[34m100\u001b[39;49;00m)\n",
      "    parser.add_argument(\u001b[33m'\u001b[39;49;00m\u001b[33m--hidden_layer_sizes\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m, \u001b[36mtype\u001b[39;49;00m=\u001b[36mtuple\u001b[39;49;00m, default=(\u001b[34m20\u001b[39;49;00m,))\n",
      "    \n",
      "    \u001b[37m# args holds all passed-in arguments\u001b[39;49;00m\n",
      "    args = parser.parse_args()\n",
      "    \n",
      "    \u001b[34mprint\u001b[39;49;00m(f\u001b[33m\"\u001b[39;49;00m\u001b[33mmax_iter={args.max_iter} hidden_layer_sizes={args.hidden_layer_sizes}\u001b[39;49;00m\u001b[33m\"\u001b[39;49;00m)\n",
      "\n",
      "    \u001b[37m# Read in csv training file\u001b[39;49;00m\n",
      "    training_dir = args.data_dir\n",
@@ -239,7 +245,8 @@
      "    \n",
      "\n",
      "    \u001b[37m## TODO: Define a model \u001b[39;49;00m\n",
      "    model = MLPClassifier(solver=\u001b[33m'\u001b[39;49;00m\u001b[33msgd\u001b[39;49;00m\u001b[33m'\u001b[39;49;00m,max_iter=args.max_iter, alpha=\u001b[34m1\u001b[39;49;00m, hidden_layer_sizes=args.hidden_layer_sizes, /           \n",
      "                          random_state=\u001b[34m1\u001b[39;49;00m)\n",
      "    \n",
      "    \u001b[37m## TODO: Train the model\u001b[39;49;00m\n",
      "    model.fit(train_x, train_y)\n",
@@ -308,7 +315,28 @@
  },
  {
   "cell_type": "code",
      "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5,)"
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from ast import literal_eval as make_tuple\n",
    "make_tuple('(5,)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
@@ -318,8 +346,12 @@
    "                    source_dir='source_sklearn', # this should be just \"source\" for your code\n",
    "                    role=role,\n",
    "                    train_instance_count=1,\n",
     "                    train_instance_type='ml.c4.xlarge',\n",
    "                    hyperparameters = {\n",
    "                        'max_iter': 1000,\n",
    "                        'hidden_layer_1': 10\n",
    "                    }\n",
    "                   )"
   ]
  },
  {
@@ -333,135 +365,21 @@
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
           "2019-06-05 18:27:13 Starting - Starting the training job..."
     ]
    }
   ],
   "source": [
    "%%time\n",
    "# Train your estimator on S3 training data\n",
        "estimator.fit('s3://'+bucket+'/sagemaker/plagiarism_predictor/train.csv')"
   ]
  },
  {
@@ -481,149 +399,137 @@
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
     "2019-06-05 16:31:31 Starting - Preparing the instances for training\n",
      "2019-06-05 16:31:31 Downloading - Downloading input data\n",
      "2019-06-05 16:31:31 Training - Training image download completed. Training in progress.\n",
      "2019-06-05 16:31:31 Uploading - Uploading generated training model\n",
      "2019-06-05 16:31:31 Completed - Training job completed\u001b[31m2019-06-05 16:31:20,627 sagemaker-containers INFO     Imported framework sagemaker_sklearn_container.training\u001b[0m\n",
      "\u001b[31m2019-06-05 16:31:20,632 sagemaker-containers INFO     No GPUs detected (normal if no gpus installed)\u001b[0m\n",
      "\u001b[31m2019-06-05 16:31:20,650 sagemaker_sklearn_container.training INFO     Invoking user training script.\u001b[0m\n",
      "\u001b[31m2019-06-05 16:31:20,942 sagemaker-containers INFO     Module train does not provide a setup.py. \u001b[0m\n",
      "\u001b[31mGenerating setup.py\u001b[0m\n",
      "\u001b[31m2019-06-05 16:31:20,942 sagemaker-containers INFO     Generating setup.cfg\u001b[0m\n",
      "\u001b[31m2019-06-05 16:31:20,943 sagemaker-containers INFO     Generating MANIFEST.in\u001b[0m\n",
      "\u001b[31m2019-06-05 16:31:20,943 sagemaker-containers INFO     Installing module with the following command:\u001b[0m\n",
      "\u001b[31m/usr/bin/python3 -m pip install -U . \u001b[0m\n",
      "\u001b[31mProcessing /opt/ml/code\u001b[0m\n",
      "\u001b[31mBuilding wheels for collected packages: train\n",
      "  Running setup.py bdist_wheel for train: started\n",
      "  Running setup.py bdist_wheel for train: finished with status 'done'\n",
      "  Stored in directory: /tmp/pip-ephem-wheel-cache-gzc0_6d2/wheels/35/24/16/37574d11bf9bde50616c67372a334f94fa8356bc7164af8ca3\u001b[0m\n",
      "\u001b[31mSuccessfully built train\u001b[0m\n",
      "\u001b[31mInstalling collected packages: train\u001b[0m\n",
      "\u001b[31mSuccessfully installed train-1.0.0\u001b[0m\n",
      "\u001b[31mYou are using pip version 18.1, however version 19.1.1 is available.\u001b[0m\n",
      "\u001b[31mYou should consider upgrading via the 'pip install --upgrade pip' command.\u001b[0m\n",
      "\u001b[31m2019-06-05 16:31:22,282 sagemaker-containers INFO     No GPUs detected (normal if no gpus installed)\u001b[0m\n",
      "\u001b[31m2019-06-05 16:31:22,298 sagemaker-containers INFO     Invoking user script\n",
      "\u001b[0m\n",
      "\u001b[31mTraining Env:\n",
      "\u001b[0m\n",
      "\u001b[31m{\n",
      "    \"input_data_config\": {\n",
      "        \"training\": {\n",
      "            \"S3DistributionType\": \"FullyReplicated\",\n",
      "            \"RecordWrapperType\": \"None\",\n",
      "            \"TrainingInputMode\": \"File\"\n",
      "        }\n",
      "    },\n",
      "    \"output_data_dir\": \"/opt/ml/output/data\",\n",
      "    \"job_name\": \"sagemaker-scikit-learn-2019-06-05-16-28-09-540\",\n",
      "    \"hosts\": [\n",
      "        \"algo-1\"\n",
      "    ],\n",
      "    \"channel_input_dirs\": {\n",
      "        \"training\": \"/opt/ml/input/data/training\"\n",
      "    },\n",
       "    \"user_entry_point\": \"train.py\",\n",
        "    \"output_dir\": \"/opt/ml/output\",\n",
      "    \"framework_module\": \"sagemaker_sklearn_container.training:main\",\n",
      "    \"resource_config\": {\n",
      "        \"network_interface_name\": \"ethwe\",\n",
      "        \"current_host\": \"algo-1\",\n",
      "        \"hosts\": [\n",
      "            \"algo-1\"\n",
      "        ]\n",
      "    },\n",
      "    \"output_intermediate_dir\": \"/opt/ml/output/intermediate\",\n",
      "    \"hyperparameters\": {},\n",
      "    \"input_dir\": \"/opt/ml/input\",\n",
      "    \"input_config_dir\": \"/opt/ml/input/config\",\n",
      "    \"additional_framework_parameters\": {},\n",
      "    \"current_host\": \"algo-1\",\n",
      "    \"num_cpus\": 4,\n",
      "    \"num_gpus\": 0,\n",
      "    \"module_name\": \"train\",\n",
      "    \"network_interface_name\": \"ethwe\",\n",
       "    \"model_dir\": \"/opt/ml/model\",\n",
      "    \"log_level\": 20,\n",
      "    \"module_dir\": \"s3://sagemaker-us-east-1-399712746635/sagemaker-scikit-learn-2019-06-05-16-28-09-540/source/sourcedir.tar.gz\"\u001b[0m\n",
      "\u001b[31m}\n",
      "\u001b[0m\n",
      "\u001b[31mEnvironment variables:\n",
      "\u001b[0m\n",
      "\u001b[31mSM_USER_ARGS=[]\u001b[0m\n",
      "\u001b[31mSM_CURRENT_HOST=algo-1\u001b[0m\n",
      "\u001b[31mSM_TRAINING_ENV={\"additional_framework_parameters\":{},\"channel_input_dirs\":{\"training\":\"/opt/ml/input/data/training\"},\"current_host\":\"algo-1\",\"framework_module\":\"sagemaker_sklearn_container.training:main\",\"hosts\":[\"algo-1\"],\"hyperparameters\":{},\"input_config_dir\":\"/opt/ml/input/config\",\"input_data_config\":{\"training\":{\"RecordWrapperType\":\"None\",\"S3DistributionType\":\"FullyReplicated\",\"TrainingInputMode\":\"File\"}},\"input_dir\":\"/opt/ml/input\",\"job_name\":\"sagemaker-scikit-learn-2019-06-05-16-28-09-540\",\"log_level\":20,\"model_dir\":\"/opt/ml/model\",\"module_dir\":\"s3://sagemaker-us-east-1-399712746635/sagemaker-scikit-learn-2019-06-05-16-28-09-540/source/sourcedir.tar.gz\",\"module_name\":\"train\",\"network_interface_name\":\"ethwe\",\"num_cpus\":4,\"num_gpus\":0,\"output_data_dir\":\"/opt/ml/output/data\",\"output_dir\":\"/opt/ml/output\",\"output_intermediate_dir\":\"/opt/ml/output/intermediate\",\"resource_config\":{\"current_host\":\"algo-1\",\"hosts\":[\"algo-1\"],\"network_interface_name\":\"ethwe\"},\"user_entry_point\":\"train.py\"}\u001b[0m\n",
      "\u001b[31mSM_LOG_LEVEL=20\u001b[0m\n",
      "\u001b[31mSM_INPUT_CONFIG_DIR=/opt/ml/input/config\u001b[0m\n",
      "\u001b[31mSM_OUTPUT_DATA_DIR=/opt/ml/output/data\u001b[0m\n",
      "\u001b[31mSM_NETWORK_INTERFACE_NAME=ethwe\u001b[0m\n",
      "\u001b[31mSM_OUTPUT_INTERMEDIATE_DIR=/opt/ml/output/intermediate\u001b[0m\n",
      "\u001b[31mPYTHONPATH=/usr/local/bin:/usr/lib/python35.zip:/usr/lib/python3.5:/usr/lib/python3.5/plat-x86_64-linux-gnu:/usr/lib/python3.5/lib-dynload:/usr/local/lib/python3.5/dist-packages:/usr/lib/python3/dist-packages\u001b[0m\n",
       "\u001b[31mSM_HPS={}\u001b[0m\n",
      "\u001b[31mSM_CHANNEL_TRAINING=/opt/ml/input/data/training\u001b[0m\n",
            "\u001b[31mSM_HOSTS=[\"algo-1\"]\u001b[0m\n",
      "\u001b[31mSM_INPUT_DATA_CONFIG={\"training\":{\"RecordWrapperType\":\"None\",\"S3DistributionType\":\"FullyReplicated\",\"TrainingInputMode\":\"File\"}}\u001b[0m\n",
      "\u001b[31mSM_USER_ENTRY_POINT=train.py\u001b[0m\n",
      "\u001b[31mSM_CHANNELS=[\"training\"]\u001b[0m\n",
       "\u001b[31mSM_MODEL_DIR=/opt/ml/model\u001b[0m\n",
      "\u001b[31mSM_INPUT_DIR=/opt/ml/input\u001b[0m\n",
      "\u001b[31mSM_OUTPUT_DIR=/opt/ml/output\u001b[0m\n",
      "\u001b[31mSM_NUM_CPUS=4\u001b[0m\n",
      "\u001b[31mSM_MODULE_NAME=train\u001b[0m\n",
      "\u001b[31mSM_RESOURCE_CONFIG={\"current_host\":\"algo-1\",\"hosts\":[\"algo-1\"],\"network_interface_name\":\"ethwe\"}\u001b[0m\n",
      "\u001b[31mSM_NUM_GPUS=0\u001b[0m\n",
      "\u001b[31mSM_FRAMEWORK_PARAMS={}\u001b[0m\n",
      "\u001b[31mSM_MODULE_DIR=s3://sagemaker-us-east-1-399712746635/sagemaker-scikit-learn-2019-06-05-16-28-09-540/source/sourcedir.tar.gz\u001b[0m\n",
      "\u001b[31mSM_FRAMEWORK_MODULE=sagemaker_sklearn_container.training:main\n",
      "\u001b[0m\n",
      "\u001b[31mInvoking script with the following command:\n",
      "\u001b[0m\n",
      "\u001b[31m/usr/bin/python3 -m train\n",
      "\n",
      "\u001b[0m\n",
            "\u001b[31m2019-06-05 16:31:24,003 sagemaker-containers INFO     Reporting training SUCCESS\u001b[0m\n",
      "Billable seconds: 52\n"
     ]
    }
   ],
   "source": [
    "# Reload an existing trained estimator\n",
      "training_job_name = \"sagemaker-scikit-learn-2019-06-05-16-28-09-540\" # SVC\n",
    "estimator = SKLearn.attach(training_job_name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [
   {
     "name": "stdout",
     "output_type": "stream",
     "text": [
     "---------------------------------------------------------------------------------------------------!CPU times: user 533 ms, sys: 13.5 ms, total: 546 ms\n",
      "Wall time: 8min 23s\n"
     ]
    }
   ],
@@ -635,12 +541,12 @@
    "\n",
    "\n",
    "# deploy your model to create a predictor\n",
        "predictor = estimator.deploy(initial_instance_count=1, instance_type='ml.t2.medium')"
   ]
  },
  {
   "cell_type": "code",
    "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
@@ -663,7 +569,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [],
   "source": [
@@ -943,7 +849,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
@@ -971,7 +877,7 @@
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
@@ -1012,55 +918,54 @@
    "        print(\"{:<11} {:.3f}\".format('Accuracy:', accuracy))\n",
    "        print()\n",
    "        \n",
    "    return tp, fp, fn, tn, precision, recall, accuracy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
     "predictions   0   1\n",
      "actuals            \n",
      "0            10   0\n",
      "1             0  15\n",
      "\n",
      "Recall:     1.000\n",
      "Precision:  1.000\n",
       "Accuracy:   1.000\n",
      "\n",
      "1.0\n",
      "    raw_predicted  predicted  actual\n",
       "0               1          1       1\n",
      "1               1          1       1\n",
      "2               1          1       1\n",
      "3               1          1       1\n",
      "4               1          1       1\n",
      "5               1          1       1\n",
      "6               0          0       0\n",
      "7               0          0       0\n",
      "8               0          0       0\n",
      "9               0          0       0\n",
      "10              0          0       0\n",
      "11              0          0       0\n",
      "12              1          1       1\n",
      "13              1          1       1\n",
      "14              1          1       1\n",
      "15              1          1       1\n",
      "16              1          1       1\n",
      "17              1          1       1\n",
      "18              0          0       0\n",
      "19              1          1       1\n",
      "20              0          0       0\n",
      "21              1          1       1\n",
      "22              1          1       1\n",
      "23              0          0       0\n",
      "24              0          0       0\n"
     ]
    }
   ],
@@ -1070,7 +975,6 @@
    "\n",
    "print(accuracy)\n",
    "\n",
     "## print out the array of predicted and true labels, if you want\n",
    "results = pd.concat([pd.DataFrame(test_y_preds), pd.DataFrame(np.round(test_y_preds)), pd.DataFrame(test_y.values)], axis=1)\n",
    "results.columns = ['raw_predicted','predicted','actual']\n",
@@ -1125,6 +1029,234 @@
    "24       0.282927        0.0       0\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "SKlearn SVC Results (c_1, c_4, lcs_word)\n",
    "\n",
    "predictions  0.0  1.0\n",
    "actuals              \n",
    "0             10    0\n",
    "1              3   12\n",
    "\n",
    "Recall:     0.800\n",
    "Precision:  1.000\n",
    "Accuracy:   0.880\n",
    "\n",
    "0.88\n",
    "    raw_predicted  predicted  actual\n",
    "0        0.938286        1.0       1\n",
    "1        0.641997        1.0       1\n",
    "2        0.742456        1.0       1\n",
    "3        0.428864        0.0       1\n",
    "4        0.840325        1.0       1\n",
    "5        0.991075        1.0       1\n",
    "6        0.203250        0.0       0\n",
    "7        0.196779        0.0       0\n",
    "8        0.329725        0.0       0\n",
    "9        0.348757        0.0       0\n",
    "10       0.319440        0.0       0\n",
    "11       0.245964        0.0       0\n",
    "12       0.399521        0.0       1\n",
    "13       0.898204        1.0       1\n",
    "14       1.000000        1.0       1\n",
    "15       0.686805        1.0       1\n",
    "16       0.483370        0.0       1\n",
    "17       0.999300        1.0       1\n",
    "18       0.118101        0.0       0\n",
    "19       0.950171        1.0       1\n",
    "20       0.378435        0.0       0\n",
    "21       0.947966        1.0       1\n",
    "22       0.930944        1.0       1\n",
    "23       0.147400        0.0       0\n",
    "24       0.282927        0.0       0"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "SKlearn MLPClassifier (5,2) Results (c_1, c_4, lcs_word)\n",
    "Predicted only positive\n",
    "\n",
    "predictions   1\n",
    "actuals        \n",
    "0            10\n",
    "1            15\n",
    "\n",
    "Recall:     1.000\n",
    "Precision:  0.600\n",
    "Accuracy:   0.600\n",
    "\n",
    "0.6\n",
    "    raw_predicted  predicted  actual\n",
    "0               1          1       1\n",
    "1               1          1       1\n",
    "2               1          1       1\n",
    "3               1          1       1\n",
    "4               1          1       1\n",
    "5               1          1       1\n",
    "6               1          1       0\n",
    "7               1          1       0\n",
    "8               1          1       0\n",
    "9               1          1       0\n",
    "10              1          1       0\n",
    "11              1          1       0\n",
    "12              1          1       1\n",
    "13              1          1       1\n",
    "14              1          1       1\n",
    "15              1          1       1\n",
    "16              1          1       1\n",
    "17              1          1       1\n",
    "18              1          1       0\n",
    "19              1          1       1\n",
    "20              1          1       0\n",
    "21              1          1       1\n",
    "22              1          1       1\n",
    "23              1          1       0\n",
    "24              1          1       0\n"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "MLPClassifier(solver='sgd',max_iter=1000, alpha=1, hidden_layer_sizes=(20, 20), random_state=1)\n",
    "Results for (c_1, c_4, lcs_word)\n",
    "trained model: sagemaker-scikit-learn-2019-06-05-15-59-29-992\n",
    "\n",
    "\n",
    "predictions   0   1\n",
    "actuals            \n",
    "0            10   0\n",
    "1             0  15\n",
    "\n",
    "Recall:     1.000\n",
    "Precision:  1.000\n",
    "Accuracy:   1.000\n",
    "\n",
    "1.0\n",
    "    raw_predicted  predicted  actual\n",
    "0               1          1       1\n",
    "1               1          1       1\n",
    "2               1          1       1\n",
    "3               1          1       1\n",
    "4               1          1       1\n",
    "5               1          1       1\n",
    "6               0          0       0\n",
    "7               0          0       0\n",
    "8               0          0       0\n",
    "9               0          0       0\n",
    "10              0          0       0\n",
    "11              0          0       0\n",
    "12              1          1       1\n",
    "13              1          1       1\n",
    "14              1          1       1\n",
    "15              1          1       1\n",
    "16              1          1       1\n",
    "17              1          1       1\n",
    "18              0          0       0\n",
    "19              1          1       1\n",
    "20              0          0       0\n",
    "21              1          1       1\n",
    "22              1          1       1\n",
    "23              0          0       0\n",
    "24              0          0       0"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "MLPClassifier(solver='sgd',max_iter=1000, alpha=1, hidden_layer_sizes=(20,), random_state=1)\n",
    "Results for (c_1, c_4, lcs_word)\n",
    "trained model: sagemaker-scikit-learn-2019-06-05-16-28-09-540\n",
    "\n",
    "predictions   0   1\n",
    "actuals            \n",
    "0            10   0\n",
    "1             0  15\n",
    "\n",
    "Recall:     1.000\n",
    "Precision:  1.000\n",
    "Accuracy:   1.000\n",
    "\n",
    "1.0\n",
    "    raw_predicted  predicted  actual\n",
    "0               1          1       1\n",
    "1               1          1       1\n",
    "2               1          1       1\n",
    "3               1          1       1\n",
    "4               1          1       1\n",
    "5               1          1       1\n",
    "6               0          0       0\n",
    "7               0          0       0\n",
    "8               0          0       0\n",
    "9               0          0       0\n",
    "10              0          0       0\n",
    "11              0          0       0\n",
    "12              1          1       1\n",
    "13              1          1       1\n",
    "14              1          1       1\n",
    "15              1          1       1\n",
    "16              1          1       1\n",
    "17              1          1       1\n",
    "18              0          0       0\n",
    "19              1          1       1\n",
    "20              0          0       0\n",
    "21              1          1       1\n",
    "22              1          1       1\n",
    "23              0          0       0\n",
    "24              0          0       0"
   ]
  },
  {
   "cell_type": "raw",
   "metadata": {},
   "source": [
    "MLPClassifier(solver='sgd',max_iter=1000, alpha=1, hidden_layer_sizes=(10,), random_state=1)\n",
    "Results for (c_1, c_4, lcs_word)\n",
    "trained model: sagemaker-scikit-learn-2019-06-05-18-27-12-335\n",
    "\n",
    "    predictions  0   1\n",
    "actuals           \n",
    "0            9   1\n",
    "1            0  15\n",
    "\n",
    "Recall:     1.000\n",
    "Precision:  0.938\n",
    "Accuracy:   0.960\n",
    "\n",
    "0.96\n",
    "    raw_predicted  predicted  actual\n",
    "0               1          1       1\n",
    "1               1          1       1\n",
    "2               1          1       1\n",
    "3               1          1       1\n",
    "4               1          1       1\n",
    "5               1          1       1\n",
    "6               0          0       0\n",
    "7               0          0       0\n",
    "8               0          0       0\n",
    "9               0          0       0\n",
    "10              0          0       0\n",
    "11              0          0       0\n",
    "12              1          1       1\n",
    "13              1          1       1\n",
    "14              1          1       1\n",
    "15              1          1       1\n",
    "16              1          1       1\n",
    "17              1          1       1\n",
    "18              0          0       0\n",
    "19              1          1       1\n",
    "20              1          1       0\n",
    "21              1          1       1\n",
    "22              1          1       1\n",
    "23              0          0       0\n",
    "24              0          0       0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
@@ -1136,7 +1268,8 @@
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "** Answer**: \n",
    "My model produced no false positives or negatives. Given the samll size of the dataset, it is inevitable that some model complexity will be able to accurately predict the test data. The goal for me was to find a relatively simple neural network model that still resulted in accurately predicting the dataset. One clue that I would be able to find a perfect model is that even a simple regression resulted in an 88% accuracy. "
   ]
  },
  {
@@ -1151,7 +1284,7 @@
   "metadata": {},
   "source": [
    "** Answer**:\n",
    "After looking at the data it was likely that the small size of the dataset combined with the significant outliers and highly corelated feature set was going to require a non-trivial model. I approced the problem by starting with the simpliest linear models (i.e. LinearRegression and SVD). These all did about the same and did not appear likely to go above 90%. Based on the answer to quesiton 1 above, I decided to got to a neural network and find the simpliest model that still had strong results. I ended up with a single hidden layer with about 20 nodes.\n"
   ]
  },
  {
@@ -1166,17 +1299,13 @@
  },
  {
   "cell_type": "code",
    "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "# uncomment and fill in the line below!\n",
     "# <name_of_deployed_predictor>.delete_endpoint()\n",
    "predictor.delete_endpoint()"
   ]
  },
  {
@@ -1190,19 +1319,65 @@
  },
  {
   "cell_type": "code",
      "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'ResponseMetadata': {'RequestId': '55C7E2783EEA94C6',\n",
       "   'HostId': 'sBRrEV7qtm8FZa1JGgfGknzk7YXCm5WDWSrMPAdww0t3/Pt0mwvsnOzmct6Yce8IZaBg8cRzhqw=',\n",
       "   'HTTPStatusCode': 200,\n",
       "   'HTTPHeaders': {'x-amz-id-2': 'sBRrEV7qtm8FZa1JGgfGknzk7YXCm5WDWSrMPAdww0t3/Pt0mwvsnOzmct6Yce8IZaBg8cRzhqw=',\n",
       "    'x-amz-request-id': '55C7E2783EEA94C6',\n",
       "    'date': 'Wed, 05 Jun 2019 21:32:09 GMT',\n",
       "    'connection': 'close',\n",
       "    'content-type': 'application/xml',\n",
       "    'transfer-encoding': 'chunked',\n",
       "    'server': 'AmazonS3'},\n",
       "   'RetryAttempts': 0},\n",
       "  'Deleted': [{'Key': 'sagemaker-scikit-learn-2019-06-05-03-56-35-496/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-03-00-36-288/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker/plagiarism_predictor/test.csv'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-03-01-47-352/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker/plagiarism_predictor/train.csv'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-17-27-07-660/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-15-52-39-040/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-17-58-46-277/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-04-10-41-836/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-18-05-09-725/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-17-17-49-978/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-18-27-12-335/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-03-10-20-850/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-17-31-43-477/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-16-28-09-540/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-14-03-02-490/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-15-52-39-040/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-15-59-29-992/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-04-23-16-790/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-16-28-09-540/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-14-03-02-490/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-04-10-41-836/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-04-23-2019-06-05-13-28-09-914/output/model.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-18-05-09-725/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-04-23-16-790/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-17-53-08-880/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-18-27-12-335/source/sourcedir.tar.gz'},\n",
       "   {'Key': 'sagemaker-scikit-learn-2019-06-05-15-59-29-992/source/sourcedir.tar.gz'}]}]"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
    ],
   "source": [
    "# deleting bucket, uncomment lines below\n",
    "\n",
    "# bucket_to_delete = boto3.resource('s3').Bucket(bucket)\n",
    "# bucket_to_delete.objects.all().delete()\n",
    "bucket_to_delete = boto3.resource('s3').Bucket(bucket)\n",
    "bucket_to_delete.objects.all().delete()"
   ]
  },
  {
    
    
    
    
    
    
    
    
    
    
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
     
     
     
     
     
     
     
     
     
     
     
     
     
     
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
